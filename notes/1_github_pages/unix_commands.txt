Shell Script:
- program with multiple Unix shell commands that we can execute from the shell 
- computer program designed to be run by a Unix shell 

Commands: 
- touch: creates a file (touch FILE_NAME)
  - file_name can include a relative or absolute file path 
  - ex: touch my-text-file.txt 
  - only use to create plain text files (.txt)

- open: opens a file (open FILE_NAME)

- mkdir: creates a directory (folder)
  - ex: mkdir DIRECTORY_NAME

- rm: remove command 
  - when you use it in shell, file will completely be gone (won't go to trash, will automatically just delete)
  - won't be able to recover removed file
  - have to be careful 

  - remove file: rm FILE_NAME/FILE_PATH
  - remove directory: rm -r DIRECTORY_NAME/DIRECTORY_PATH

Further Reading:
- mv (moving/renaming files)
- cp (copying files)

Shell Script Programming:
- can have variety of extensions (.sh, .bash, .zsh) or no extension at all <- no extension more common 
- should start with a shebang (#!): 
  - #!/bin/bash (windows or mac) <- more portable 
  - #!/bin/zsh (mac)

--------------------------------------------------------------------------------------------

Executing a Shell Script: two options
1. referencing the script with a relative path
  - ./SCRIPT_FILENAME

2. use a shell command
  - sh ./FILENAME
  - bash ./FILENAME
  - zsh ./FILENAME

Redirecting Output:
- to a file:
  > (overwrite any file contents)
  >> (append to any file contents)

- to another process:
  |

Commands:
- cat FILENAME: output the contents of a file
- head FILENAME: output the first 10 lines of a file
- tail FILENAME: output the last 10 lines of a file 
- grep: search your file for text
  - cat FILENAME | grep 'word your searching'

  Further Reading:
  - more
  - less

--------------------------------------------------------------------------------------------

File Permissions:

0123456789 
0 - tells you whether it's a file ('-') or directory ('d')
123 - for user ('u')
456 - for group ('g')
789 - for other ('o')

rwx (read, write, execute) 
  - examples:
    - rw-: we can run and write but not execute 
    - ---: no access
    - rwx: complete access 

chmod: update permissions 
- chmod +x FILE_NAME
- chmod go-x FILENAME (remove execute permissions for group & other)

- can update using numbers 
  - read = 4, write = 2, execute = 1 (total = 7)
  
  - chmod 744 FILENAME (give all access to user, only read access to group & others)
  - chmod 777 FILENAME (give all access to user, group, and others)

--------------------------------------------------------------------------------------------

Unix Commands (to terminal):
- reference explainshell.com to know more about each command 
- terminal is case sensitive

pwd:
- print working directory
- output your current directory

whoami:
- print your username 

ls:
- list the files in our current directory 

ls -l:
- list the files in our current directory in a list format 

ls -a:
- list the files in our current directory including hidden files

ls -al:
- list the files in our current directory in a list format including hidden files
- tells you which items are files and which items are directories 
  - first character = 'd' -> directory
  - first character = '-' -> file 

clear:
- to clear terminal screen (can scroll up to see previous commands)
- clear the shell window

cd <File_Name>:
- change directory to the given File_Name

cd ..:
- change directory to one level up 

cd .:
- current directory 

cd /Users/...:
- absolute path to change directory 
- try not to use as it's very specific to your own device 
- use relative paths 

cd ~:
- take you back to your home directory 

cd 'directory':
- if spaces in file/folder name, put single or double quotes around it 

TAB key:
- for auto complete

UP arrow key:
- for scrolling through previous commands 

Absolute Paths:
- on Mac start with '/'

date:
- print today's date and time

where <Command_Name> || which -a <Command_Name>:
- all the locations where that command is located

which <Command_Name>:
- where is the command that will be run located

--version:
- prints version you're running

--------------------------------------------------------------------------------------------

ECHO & Environment Variables

echo <String>:
- print the given String
- \a = alarm? 
- \n = newline

environment variables:
- 'global' variables that software uses to execute properly

.bash_profile || .zprofile:
- executes on login

.bashrc || .zshrc: